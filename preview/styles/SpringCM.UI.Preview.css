@charset "UTF-8";
/*------------------------------------*\
	#DOCUMENTPREVIEW
\*------------------------------------*/
/**
 * CONTENTS
 *
 * SETUP
 * Component............Default component settings and tools.
 *
 * COMPONENT CODE
 * Code.................The styles.
 */
/*------------------------------------*\
	#SETUP-COMPONENT
\*------------------------------------*/
/*
 * Starting setup variables, mixins and functions to include in all components.
 */
/**
 * CONTENTS
 *
 * SETTINGS
 * Default..............lib default settings.
 * Colors...............Manage our color palette in isolation.
 * Global...............Globally-available variables and settings/config.
 * Responsive...........Set up and name our breakpoints.
 *
 * TOOLS
 * Functions............inuitcss' default functions. ??? Do we need this one???
 * Mixins...............inuitcss' default mixins. ??? Do we need this one???
 * Mixins...............Our mixins.
 * Responsive...........Responsive tooling (requires responsive settings).
 * Aliases..............Aliases onto longer inuitcss variables and mixins.
 *
 * GENERIC
 * Box-sizing...........Better default 'box-sizing'.
 *
 * BASE
 * Page.................Our page module.
 * Links................Hyperlink styles.
 * Images...............inuitcss images.
 *
 * OBJECTS
 * None yet.............None
 *
 * COMPONENTS
 * None yet.............None
 *
 * TRUMPS
 * None yet.............None
 */
/**
 * #SETTINGS
 */
/*------------------------------------*\
	#INUIT-SETTINGS-DEFAULTS
\*------------------------------------*/
/**
 * inuitcss, by @csswizardry | github.com/inuitcss | inuitcss.com
 *
 * These variables are inuitcss' defaults; they should not be modified or
 * adjusted directly; you should predefine the variables in your own project.
 */
/*------------------------------------*\
	#SETTINGS-COLORS
\*------------------------------------*/
/**
 * SpringCM
 *
 * These are SpringCM's global palette colors.
 *
 * Usage Rules
 * 1. All uses of colors in dependant projects should generally pull from this palette.
 * 2. Do not use these colors directly in your css declarations.
 *    a. Instead, create your own color palette which declares semantic $color variables.
 *
 * Syntax Rules
 * 1. Define CSS hexvalue(et al) colors with name $spring-*.
 *    a. Use all 6 characters for hexvalues.
 * 2. When using a color, create a semantically named $color-{describe element}.
 *    a. Do not use $spring colors directly in a CSS declaration.
 * 3. Unless another order is specified, order by ROYGBIV, then dark to light.
 */
/*------------------------------------*\
	#SETTINGS-COLORS
\*------------------------------------*/
/**
 * SpringCM
 *
 * These are SpringCM's global palette colors.
 *
 * Usage Rules
 * 1. All uses of colors in dependant projects should generally pull from this palette.
 * 2. Do not use these colors directly in your css declarations.
 *    a. Instead, create your own color palette which declares semantic $color variables.
 *
 * Syntax Rules
 * 1. Define CSS hexvalue(et al) colors with name $spring-*.
 *    a. Use all 6 characters for hexvalues.
 * 2. When using a color, create a semantically named $color-{describe element}.
 *    a. Do not use $spring colors directly in a CSS declaration.
 * 3. Unless another order is specified, order by ROYGBIV, then dark to light.
 */
/*------------------------------------*\
	#SETTINGS-GLOBAL
\*------------------------------------*/
/**
 * SpringCM
 *
 * SpringCM global variables.
 */
/*------------------------------------*\
	#INUIT-SETTINGS-RESPONSIVE
\*------------------------------------*/
/**
 * inuitcss, by @csswizardry | github.com/inuitcss | inuitcss.com
 *
 * These variables are inuitcss' defaults; they should not be modified or
 * adjusted directly; you should predefine the variables in your own project.
 *
 * Hold our breakpoint aliases and conditions in a list.
 *
 * These can be invoked later on via the 'media-query()' mixin found in '_tools.responsive'.
 */
/**
 * #TOOLS
 */
/*------------------------------------*\
	#INUIT-TOOLS-FUNCTIONS
\*------------------------------------*/
/**
 * inuitcss, by @csswizardry | github.com/inuitcss | inuitcss.com
 *
 * inuitcss makes use of a few functions that are also available for you to use
 * later on in your extension of the framework.
 */
/*------------------------------------*\
	#INUIT-TOOLS-MIXINS
\*------------------------------------*/
/**
 * inuitcss, by @csswizardry | github.com/inuitcss | inuitcss.com
 *
 * inuitcss has a number of default mixins that the framework, and developers
 * working with it, can make use of.
 */
/*------------------------------------*\
	#TOOLS-MIXINS
\*------------------------------------*/
/**
 * SpringCM
 *
 * SpringCM global mixins.
 */
/*------------------------------------*\
	#INUIT-TOOLS-RESPONSIVE
\*------------------------------------*/
/**
 * inuitcss, by @csswizardry | github.com/inuitcss | inuitcss.com
 */
/*------------------------------------*\
	#INUIT-SETTINGS-DEFAULTS
\*------------------------------------*/
/**
 * inuitcss, by @csswizardry | github.com/inuitcss | inuitcss.com
 *
 * These variables are inuitcss' defaults; they should not be modified or
 * adjusted directly; you should predefine the variables in your own project.
 */
/*------------------------------------*\
	#INUIT-TOOLS-MIXINS
\*------------------------------------*/
/**
 * inuitcss, by @csswizardry | github.com/inuitcss | inuitcss.com
 *
 * inuitcss has a number of default mixins that the framework, and developers
 * working with it, can make use of.
 */
/*------------------------------------*\
	#TOOLS-ALIASES
\*------------------------------------*/
/**
 * SpringCM
 *
 * Alias $inuit variables with our own variables that don't reference inuit.
 */
/**
 * #GENERIC
 */
/*------------------------------------*\
	#TOOLS-MIXINS
\*------------------------------------*/
/**
 * SpringCM
 *
 * SpringCM global mixins.
 */
/*------------------------------------*\
	#INUIT-GENERIC-BOX-SIZING
\*------------------------------------*/
/**
 * Set the global 'box-sizing' state to 'border-box'.
 *
 * css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice
 * paulirish.com/2012/box-sizing-border-box-ftw
 */
springcm-preview {
  box-sizing: border-box;
}
springcm-preview *, springcm-preview *:before, springcm-preview *:after {
  box-sizing: inherit;
}

/**
 * #BASE
 */
/*------------------------------------*\
	#SETTINGS-COLORS
\*------------------------------------*/
/**
 * SpringCM
 *
 * These are SpringCM's global palette colors.
 *
 * Usage Rules
 * 1. All uses of colors in dependant projects should generally pull from this palette.
 * 2. Do not use these colors directly in your css declarations.
 *    a. Instead, create your own color palette which declares semantic $color variables.
 *
 * Syntax Rules
 * 1. Define CSS hexvalue(et al) colors with name $spring-*.
 *    a. Use all 6 characters for hexvalues.
 * 2. When using a color, create a semantically named $color-{describe element}.
 *    a. Do not use $spring colors directly in a CSS declaration.
 * 3. Unless another order is specified, order by ROYGBIV, then dark to light.
 */
/*------------------------------------*\
	#SETTINGS-GLOBAL
\*------------------------------------*/
/**
 * SpringCM
 *
 * SpringCM global variables.
 */
/*------------------------------------*\
	#INUIT-SETTINGS-DEFAULTS
\*------------------------------------*/
/**
 * inuitcss, by @csswizardry | github.com/inuitcss | inuitcss.com
 *
 * These variables are inuitcss' defaults; they should not be modified or
 * adjusted directly; you should predefine the variables in your own project.
 */
/*------------------------------------*\
	#INUIT-TOOLS-MIXINS
\*------------------------------------*/
/**
 * inuitcss, by @csswizardry | github.com/inuitcss | inuitcss.com
 *
 * inuitcss has a number of default mixins that the framework, and developers
 * working with it, can make use of.
 */
/*------------------------------------*\
	#TOOLS-ALIASES
\*------------------------------------*/
/**
 * SpringCM
 *
 * Alias $inuit variables with our own variables that don't reference inuit.
 */
/*------------------------------------*\
	#TOOLS-MIXINS
\*------------------------------------*/
/**
 * SpringCM
 *
 * SpringCM global mixins.
 */
/*------------------------------------*\
	#BASE-PAGE
\*------------------------------------*/
/**
 * SpringCM
 *
 * SpringCM global base.
 */
/**
 * High-, page-level styling.
 *
 * 1. Set the default 'font', 'font-size' and 'line-height' for the entire project,
 *    sourced from our default variables. The 'font-size' is calculated to exist
 *    in ems, the 'line-height' is calculated to exist unitlessly.
 * 2. Ensure the page always fills at least the entire height of the viewport.
 * 3. Fonts on OSX will look more consistent with other systems that do not
 *    render text using sub-pixel anti-aliasing.
 */
springcm-preview {
  font-family: Arial, sans-serif;
  font-size: 1em;
  /* [1] */
  line-height: 1.5;
  /* [1] */
  background-color: #ffffff;
  color: #212121;
  min-height: 100%;
  /* [2] */
  -moz-osx-font-smoothing: grayscale;
  /* [3] */
  -webkit-font-smoothing: antialiased;
  /* [3] */
}

/*------------------------------------*\
	#SETTINGS-COLORS
\*------------------------------------*/
/**
 * SpringCM
 *
 * These are SpringCM's global palette colors.
 *
 * Usage Rules
 * 1. All uses of colors in dependant projects should generally pull from this palette.
 * 2. Do not use these colors directly in your css declarations.
 *    a. Instead, create your own color palette which declares semantic $color variables.
 *
 * Syntax Rules
 * 1. Define CSS hexvalue(et al) colors with name $spring-*.
 *    a. Use all 6 characters for hexvalues.
 * 2. When using a color, create a semantically named $color-{describe element}.
 *    a. Do not use $spring colors directly in a CSS declaration.
 * 3. Unless another order is specified, order by ROYGBIV, then dark to light.
 */
/*------------------------------------*\
	#SETTINGS-GLOBAL
\*------------------------------------*/
/**
 * SpringCM
 *
 * SpringCM global variables.
 */
/*------------------------------------*\
	#TOOLS-MIXINS
\*------------------------------------*/
/**
 * SpringCM
 *
 * SpringCM global mixins.
 */
/*------------------------------------*\
	#BASE-LINKS
\*------------------------------------*/
/**
 * SpringCM
 *
 * SpringCM global link styles.
 */
springcm-preview a {
  text-decoration: none;
  color: #29bdbe;
}
springcm-preview a:hover, springcm-preview a:active, springcm-preview a:focus {
  text-decoration: underline;
}

/*------------------------------------*\
	#TOOLS-MIXINS
\*------------------------------------*/
/**
 * SpringCM
 *
 * SpringCM global mixins.
 */
/*------------------------------------*\
	#INUIT-BASE-IMAGES
\*------------------------------------*/
/**
 * inuitcss, by @csswizardry | github.com/inuitcss | inuitcss.com
 */
/**
 * 1. Fluid images for responsive purposes.
 * 2. Offset `alt` text from surrounding copy.
 * 3. Setting `vertical-align` removes the whitespace that appears under `img`
 *    elements when they are dropped into a page as-is. Safer alternative to
 *    using `display: block;`.
 */
springcm-preview img {
  max-width: 100%;
  /* [1] */
  font-style: italic;
  /* [2] */
  vertical-align: middle;
  /* [3] */
}

/**
 * 1. Google Maps breaks if `max-width: 100%` acts upon it; use their selector
 *    to remove the effects.
 * 2. If a `width` and/or `height` attribute have been explicitly defined, letΓÇÖs
 *    not make the image fluid.
 */
springcm-preview .gm-style img,
springcm-preview img[width],
springcm-preview img[height] {
  /* [2] */
  max-width: none;
}

/*------------------------------------*\
	#SPRINGCM-PREVIEW Component Code
\*------------------------------------*/
springcm-preview {
  display: block;
  border: 1px solid red;
}
springcm-preview .page {
  width: 200px;
  height: 200px;
  border: 1px solid #727272;
  margin: 20px;
}

/*# sourceMappingURL=SpringCM.UI.Preview.css.map */
