/*------------------------------------*\
	#TOOLS-MIXINS
\*------------------------------------*/

/**
 * Global mixins. A mixin lets you make groups of css declarations
 * that you want to reuse throughout the project.  Values can be passed in 
 * to make the mixin more flexible.
 */


// Apply 'attention' styles in one go.
// 
// .btn {
//     @include attention() {
//         text-decoration: underline;
//     }
// }
//
// This will yeild:
//
// .btn:hover, .btn:active, .btn:focus {
//     text-decoration: underline; 
// }
@mixin attention($self: false) {
	@if($self != false) {
		&,
		&:hover,
		&:active,
		&:focus {
			@content;
		}
	}
	@else {
		&:hover,
		&:active,
		&:focus {
			@content;
		}
	}
}


// Create a fully formed type style (sizing and vertical rhythm) by passing in a
// single value, e.g.:
//
// .foo {
//     @include font-size(12px);
// }
//
// This will generate a rem-based font-size with its pixel fallback, as well as
// a unitless line-height which will place the element on your baseline, e.g.:
//
// .foo {
//     font-size: 12px;
//     font-size: 0.75rem;
//     line-height: 2;
// }
//
// If you do not want inuitcss to generate you a line-height automatically, you
// simply pass in your own as a second paramater:
//
// .foo {
//     @include font-size(12px, 1.5);
// }
//
// This will yield:
//
// .foo {
//     font-size: 12px;
//     font-size: 0.75rem;
//     line-height: 1.5;
// }
//
// This parameter can be any integer, 'inherit', or 'normal'. If you don't want
// a line-height at all, pass in a second paramater of 'none' or 'false':
//
// .foo {
//     @include font-size(12px, none);
// }
//
// This will yield:
//
// .foo {
//     font-size: 12px;
//     font-size: 0.75rem;
// }
@mixin font-size($font-size, $line-height: auto) {
	font-size: $font-size;
	font-size: ($font-size / $base-font-size) * 1rem;

	@if $line-height == auto {
		line-height: ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
	}

	@else {
		@if (type-of($line-height) == number or $line-height == inherit or $line-height == normal) {
			line-height: $line-height;
		}

		@elseif ($line-height != none and $line-height != false) {
			@warn "\"#{line-height}\" is not a valid value for \"line-height\"."
		}
	}
}


// A simple mixin to quickly generate whole media queries from the aliases and
// conditions defined in '_settings.default.scss'.
//
// Usage:
//
// .foo {
//     color: green;
//
//     @include media-query(phone) {
//         color: red;
//     }
// }
@mixin media-query($mq) {
	$breakpoint-found: false;

	// Loop through the list of breakpoints we’ve provided in our settings file.
	@each $breakpoint in $breakpoints {
		
		// Grab the alias and the condition from their respective locations in
		// the list.
		$alias:        nth($breakpoint, 1);
		$condition:    nth($breakpoint, 2);

		// If the media query we’ve specified has an alias and a condition...
		@if $mq == $alias and $condition {

			// ...tell the mixin that we’ve found it...
			$breakpoint-found: true;

			// ...and spit it out here.
			@media #{$condition} {
				@content;
			}
		}
	}

	// If the user specifies a non-exitent alias, send them a warning.
	@if $breakpoint-found == false{
		@warn "Breakpoint '#{$mq}' does not exist."
	}
}


// A mixin to spit out our width classes. Pass in the columns we want the widths
// to have, and an optional suffix for responsive widths.
// This mixin is rarely used outside of tools.widths, this is just a quick way
// to create all our width classes in one pass.
//
// E.g. to create thirds (100%, 66%, 33%) for a tablet breakpoint:
// 
// @include widths(3, tablet); 

$widths-delimiter: \/ !global;


@mixin widths($widths-columns, $widths-breakpoint: null) {
	// Loop through the number of columns for each denominator of our fractions.
	@each $widths-denominator in $widths-columns {

		// If we’re trying to make wholes, just spit a 100% width utility out one time only.
		@if ($widths-denominator == 1) {
			.w-1#{$widths-delimiter}1#{$widths-breakpoint} {
				width: 100% !important;
			}
		} @else {
			// Begin creating a numberator for our fraction up until we hit the denominator.
			@for $widths-numerator from 1 to $widths-denominator {
				// Build a class in the format `.u-3/4` or `.u-3-of-4`.
				.w-#{$widths-numerator}#{$widths-delimiter}#{$widths-denominator}#{$widths-breakpoint} {
					width: ($widths-numerator / $widths-denominator) * 100% !important;
				}
			}
		}
	}
}
